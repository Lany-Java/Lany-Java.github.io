<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>浅谈基本类型与包装类型的区别</title>
    <url>/2019/10/24/%E6%B5%85%E8%B0%88%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>在Java中每个基本类型都对应了一个包装类型，他们之间可以通过自动装箱和自动拆箱自由的转化，但是他们之间是不同的，两者之间的差别在使用的时候可能会造成很严重的错误，所以我们在使用的时候要特别注意。他们之间主要区别以及注意事项有以下几点</p>
<h2 id="包装类型值可以为NULL，但是基本类型不可以"><a href="#包装类型值可以为NULL，但是基本类型不可以" class="headerlink" title="包装类型值可以为NULL，但是基本类型不可以"></a>包装类型值可以为NULL，但是基本类型不可以</h2><p>因为包装类型可以为NULL这一特点，使得包装类型可以应用于POJO类中，但是基本类型不可以。</p>
<p>这里POJO的全称为<span class="label default">Plain Ordinary Java</span>,也就是无规则的Java对象，只有属性字段以及相应的setter和getter方法，比如：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">public class User {</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Integer getId() {</span><br><span class="line">        return id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) {</span><br><span class="line">        this.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getName() {</span><br><span class="line">        return name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setName(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>与POJO相类似的还有数据传输对象DTO(Data Transfer Object，泛指用于展示层与服务层之间的数据传输对象)、视图对象VO(View Object，把某个页面的数据封装起来)、持久化对象PO(Persistant Object,可以看成是与数据库中的表映射的Java对象)</p>
<p>包装数据类型的默认初始值是null，而基本数据类型的默认初始值则不是，比如int初始值为0，double初始值为0.0，等等，在数据库中，所有SQL默认值都是null，如果我们把POJO中的映射属性类型写为基本类型，当查找不到记录的时候，返回null赋给基本类型就会出错，这个时候我们只有使用包装类型才能保证不会出现这样的错误</p>
<p>在《阿里巴巴的Java开发手册中》有这样的说明</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">数据库的查询结果可能是null，如果使用基本类型的话，因为要自动拆箱(将包装类型转化为基本类型，比如说把Integer对象转化为int值)，</span><br><span class="line"></span><br><span class="line">就会抛出NPE(NullPointerException)的异常</span><br></pre></td></tr></tbody></table></figure>

<p>所以在阿里巴巴的Java开发手册中强制规定了基本数据类型和包装数据类型的使用标准如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">（1） 所有的POJO类属性必须使用包装数据类型。</span><br><span class="line"></span><br><span class="line">（2） RPC方法的返回值和参数必须使用包装数据类型。</span><br><span class="line"></span><br><span class="line">（3） 所有的局部变量推荐使用基本数据类型。</span><br></pre></td></tr></tbody></table></figure>

<h2 id="包装类型可以用在泛型之中，但是基本类型不可以"><a href="#包装类型可以用在泛型之中，但是基本类型不可以" class="headerlink" title="包装类型可以用在泛型之中，但是基本类型不可以"></a>包装类型可以用在泛型之中，但是基本类型不可以</h2><p>泛型不能使用基本类型，如果使用了基本类型，那么在编译的时候将会报错</p>
<p>错误写法：</p>
<div class="note danger"><p>List<int> list = new ArrayList&lt;&gt;();</int></p></div>

<p>正确写法：</p>
<div class="note default"><p>List<integer> list = new ArrayList&lt;&gt;();</integer></p></div>

<p>造成这种结果的原因是因为泛型在编译时会进行类型擦除，最后只保留原始类型，而原始类型只能是Object及其子类。</p>
<h2 id="基本类型相较于包装类型更加的高效"><a href="#基本类型相较于包装类型更加的高效" class="headerlink" title="基本类型相较于包装类型更加的高效"></a>基本类型相较于包装类型更加的高效</h2><p>基本类型相较于包装类型更加的高效，因为基本类型在栈中直接储存的具体数值，而包装类型则在栈中储存的是对堆中的引用(即在堆中的地址)</p>
<p><img src="stack_and_heap.jpg" alt=""></p>
<p>很显然，包装类型在堆中还要占用内存，它需要占据更多的内存空间，对于我们经常要用到的局部变量来说，每次如果都要new一个包装类型就会显得十分的笨重，所以在阿里巴巴Java开发手册中，对于局部变量更加推荐使用基本数据类型</p>
<h2 id="两个包装类型的值可以相同，但是却不相等"><a href="#两个包装类型的值可以相同，但是却不相等" class="headerlink" title="两个包装类型的值可以相同，但是却不相等"></a>两个包装类型的值可以相同，但是却不相等</h2><p>首先我们来看一段代码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Integer a = new Integer(10);</span><br><span class="line">Integer b = new Integer(10);</span><br><span class="line"></span><br><span class="line">System.out.println(a == b);   //输出为false</span><br><span class="line">System.out.println(a.equals(b));    //输出为true</span><br></pre></td></tr></tbody></table></figure>

<p>使用“==”的时候，我们比较的是栈内存中的内容，所以对于类对象，使用“==”比较的是他们在内存中指向的地址是否相同，而对于基本数据类型，使用“==”则比较的是他们的值是否相同，所以第一个结果是false</p>
<p>使用equals函数进行比较则比较的是他们的值，所以第二个结果是ture</p>
<p>综上所述我们在进行包装类的比较时，如果使用“==”那么结果可能会出人意料</p>
<h2 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h2><p>首先来谈谈两个的概念：<br>自动装箱：将基本类型转换为包装类型<br>自动拆箱：将包装类型转换为基本类型</p>
<p>在JavaSE5之前，我们是要手动拆装箱的:</p>
<div class="note default"><p>Integer integer = new Integer(10); //手动装箱<br>int i = integer.intValue();        //手动拆箱</p></div>

<p>但是在JavaSE5之后，就提供了自动拆装箱的功能:</p>
<div class="note default"><p>Integer integer  = 10;  // 自动装箱<br>int i = integer;        // 自动拆箱</p></div>

<p>自动拆装箱反编译之后：</p>
<div class="note default"><p>Integer integer = Integer.valueOf(10);<br>int i = integer.intValue();</p></div>

<p>现在我们来看三段代码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">// 基本类型和包装类型的比较</span><br><span class="line">int a = 100;</span><br><span class="line">Integer b = 100;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line"></span><br><span class="line">// 两个包装类型的比较</span><br><span class="line">Integer c = 100;              //这里和第四点不一样的赋值不一样哦</span><br><span class="line">Integer d = 100;</span><br><span class="line">System.out.println(c == d);</span><br><span class="line"></span><br><span class="line">// 两个基本类型的比较</span><br><span class="line">c = 200;</span><br><span class="line">d = 200;</span><br><span class="line">System.out.println(c == d);</span><br></pre></td></tr></tbody></table></figure>

<p>第一段：<strong>基本类型</strong>和<strong>包装类型</strong>的比较</p>
<div class="note primary"><p>结果：true</p></div>

<p>第二段：<strong>包装类型</strong>与<strong>包装类型</strong>之间的比较(<strong>对包装类型直接赋值，不是使用new Integer()</strong>)</p>
<div class="note primary"><p>结果：true</p></div>

<p>第三段：<strong>包装类型</strong>和<strong>包装类型</strong>之间进行比较(<strong>重新赋值200之后</strong>)</p>
<div class="note primary"><p>结果：false</p></div>

<p>这三次比较的结果是true，true，false，可能你会有点意外，现在我们来看看这是为什么？</p>
<p>通过前面我们观察自动拆装箱的反编译结果，我们可以知道，自动装箱是通过<span class="label default">Integer.valueOf</span>完成的，那我们就来看看这个方法的源码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">public static Integer valueOf(int i) {</span><br><span class="line">    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    return new Integer(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>从这个方法的源码中我们可以明显的看到IntegerCache起到了很重要的作用，那这个时候我们又来看看IntegerCache是什么：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">private static class IntegerCache {</span><br><span class="line">    static final int low = -128;</span><br><span class="line">    static final int high;</span><br><span class="line">    static final Integer cache[];</span><br><span class="line"></span><br><span class="line">    static {</span><br><span class="line">        // high value may be configured by property</span><br><span class="line">        int h = 127;</span><br><span class="line">        int i = parseInt(integerCacheHighPropValue);</span><br><span class="line">        i = Math.max(i, 127);</span><br><span class="line">        h = Math.min(i, Integer.MAX_VALUE - (-low) -1);</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = new Integer[(high - low) + 1];</span><br><span class="line">        int j = low;</span><br><span class="line">        for(int k = 0; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = new Integer(j++);</span><br><span class="line"></span><br><span class="line">        // range [-128, 127] must be interned (JLS7 5.1.7)</span><br><span class="line">        assert IntegerCache.high &gt;= 127;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>从这段代码中我们可以看出-128到127之间的数会从IntegerCache中取值，<strong>即对于-128到127之间的数，会进行缓存，例如Integer i = 127时，会将127进行缓存，下次在写Integer j = 127的时候，就会直接从缓存中取，就不会new了，如果超过128就会重新new一个对象</strong></p>
<div class="note default"><p>所以在我们这个问题中:</p>
<p>第一段是因为，当包装类型和基本类型进行比较时，会进行自动拆箱，是二者的值进行的比较，所以结果是true，</p>
<p>第二段是因为，100是在-128到127之间，d指向的是缓存中的对象，和c指向的是同一个对象，所以结果是true</p>
<p>第三段是因为，200超过了127，c和d都是重新new Integer(200)，且是不同的对象，所以结果是false</p></div>

<p>看完了这么多，提炼一下，在这种会进行自动拆装箱的问题中，我们需要注意的是：</p>
<blockquote class="blockquote-center"><p>当需要进行自动装箱的时候，如果数字在-128到127之间，会直接使用缓存中的对象，而不是重新创建一个对象，如果数字大于或者小于这两个，那么是会重新创建一个对象的</p>
</blockquote>

<p>Ps:<br><br>本文参考自：<a href="https://juejin.im/post/5d8ff563f265da5bb252de76" target="_blank" rel="noopener">https://juejin.im/post/5d8ff563f265da5bb252de76</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>基础类型</tag>
        <tag>包装类型</tag>
      </tags>
  </entry>
  <entry>
    <title>用GitHub+Hexo从零搭建一个博客</title>
    <url>/2019/10/23/%E7%94%A8GitHub-Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们学习总要有一个地方来记录自己走过的路，爬过的坑，我以前使用过印象笔记，但是因为有一次电脑意外的“出事”，以前的记录全部不见了，后来我又在GitHub上写md文档来记录自己的学习，但作为一个不甘寂寞的程序猿，我当然也想要搭建一个属于自己的个人网站，于是本着这样的思想，我建立了这个个人博客来记录自己的学习，也方便我可以与其他的人交流彼此的想法和技术(只有交流才能更好的进步),这就有了这个博客的诞生。</p>
<a id="more"></a>
<p>本篇博文包含以下内容</p>
<ol>
<li><p>GitHub Pages与Hexo</p>
<ul>
<li><p>什么是GitHub Pages？</p>
</li>
<li><p>什么是Hexo？</p>
</li>
</ul>
</li>
<li><p>搭建步骤</p>
<ul>
<li><p>GitHub创建个人仓库</p>
</li>
<li><p>获取个人网站域名</p>
</li>
<li><p>配置环境-安装Git</p>
</li>
<li><p>配置环境-安装Node.Js</p>
</li>
<li><p>配置环境-安装Hexo</p>
</li>
<li><p>推送网站</p>
</li>
<li><p>绑定域名</p>
</li>
</ul>
</li>
</ol>
<h1 id="GitHub-Pages与Hexo"><a href="#GitHub-Pages与Hexo" class="headerlink" title="GitHub Pages与Hexo"></a>GitHub Pages与Hexo</h1><h2 id="什么是GitPages？"><a href="#什么是GitPages？" class="headerlink" title="什么是GitPages？"></a>什么是GitPages？</h2><p>GitHub Page是一种静态站点托管服务，该服务直接从GitHub上的存储库获取HTML，CSS和JavaScript文件，可以选择在构建过程中运行这些文件并发布网站。</p>
<p>您可以将站点托管在GitHub的<span class="label default">github.io</span>域或您自己的自定义域上，可以使用GitHub Pages直接从GitHub存储库托管有关您自己，您的组织或项目的网站。:smiling_imp:</p>
<h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub，你没看错，全球最大的同性恋交友网站（逃……）。Hexo同时也是GitHub上的开源项目，如果想要更加全面的了解Hexo，可以到其官网 Hexo 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2><p>默认大家都有自己的GitHub账号，如果没有，请移步<a herf="www.google.com">谷歌</a>,查询GitHub账号的创建。</p>
<p>在创建好账号之后，点击GitHub中的New repository创建新仓库，仓库名应该为:<span class="label default">用户名.github.io</span></p>
<h2 id="获取个人网站域名"><a href="#获取个人网站域名" class="headerlink" title="获取个人网站域名"></a>获取个人网站域名</h2><p>域名是我们输入的网站的入口，有许多我们常见的域名后缀，比如com,cn,org,net等，当然也有许多小众的域名比如xyz,me,io等后缀，我们在申请域名的时候，可以根据自己的喜好，选择不同的后缀。但是很多小众的域名后缀在大陆是没有办法备案的，网站也就没有办法上线。所以可以尽量使用普遍一些的域名后缀</p>
<p>申请域名的地方有很多，比如阿里云和腾讯云，这里我使用的是阿里云：<a herf="www.aliyun.com">阿里云</a>，进去之后找到<a herf="https://wanwang.aliyun.com/domain/">域名注册</a>，购买域名这也是我们使用GitHub+Hexo搭建博客唯一需要花钱的地方</p>
<h2 id="配置环境-安装Git"><a href="#配置环境-安装Git" class="headerlink" title="配置环境-安装Git"></a>配置环境-安装Git</h2><p>Git是什么？</p>
<p>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。</p>
<h2 id="配置环境-安装Node-Js"><a href="#配置环境-安装Node-Js" class="headerlink" title="配置环境-安装Node.Js"></a>配置环境-安装Node.Js</h2><h2 id="配置环境-安装Hexo"><a href="#配置环境-安装Hexo" class="headerlink" title="配置环境-安装Hexo"></a>配置环境-安装Hexo</h2><h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>second bolg</title>
    <url>/2019/10/22/second-bolg/</url>
    <content><![CDATA[<p>这是我的第二篇博客</p>
]]></content>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2019/10/20/test-my-site/</url>
    <content><![CDATA[<h1 id="这个是我的第一篇博文测试"><a href="#这个是我的第一篇博文测试" class="headerlink" title="这个是我的第一篇博文测试"></a>这个是我的第一篇博文测试</h1><p>兰源<br>lanyuan<br>蓝云</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
